// <auto-generated />
using System;
using EcommerceData.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommerceData.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceData.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Adidas"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Armani"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Asics"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Cabba"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Calvin Klein"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Columbia"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Diesel"
                        },
                        new
                        {
                            Id = 8,
                            Title = "H&M"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Zara"
                        });
                });

            modelBuilder.Entity("EcommerceData.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcommerceData.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EcommerceData.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Kokybiški, stilingi ir madingi aksesuarai, apranga, avalynė moterims, vyrams bei vaikams Pigu.lt el. parduotuvės asortimente siūlomi itin palankiomis sąlygomis. Šios stiliaus detalės leidžia mums susikurti pageidaujamą įvaizdį ir būtent taip išreikšti save. Kokybiška apranga ir avalynė užtikrina komfortą net ir nepatogiose situacijose, o aksesuarai dar labiau pabrėžia mūsų asmenybę. Kuo daugiau skirtingų detalių turėsite, tuo daugiau unikalių derinių pavyks sukurti. Gausi jų įvairovė užtikrins, kad kiekvienam čia pavyks atrasti sau tinkamas įvaizdžio detales. Nesvarbu, ar ieškosite rūbų laisvalaikiui, patogių batų vaikams ar unikalių aksesuarų ypatingai progai, čia visuomet bus iš ko pasirinkti. Įsitikinkite tuo patys – apranga, avalynė ir aksesuarai bet kuriuo metu pasiekiami internetu! ",
                            ParentId = 0,
                            Title = "Apranga, avalynė aksesuarai"
                        },
                        new
                        {
                            Id = 2,
                            ParentId = 1,
                            Title = "Moterims"
                        },
                        new
                        {
                            Id = 3,
                            ParentId = 1,
                            Title = "Vyrams"
                        },
                        new
                        {
                            Id = 4,
                            ParentId = 1,
                            Title = "Vaikams"
                        },
                        new
                        {
                            Id = 5,
                            ParentId = 2,
                            Title = "Drabužiai moterims"
                        },
                        new
                        {
                            Id = 6,
                            ParentId = 2,
                            Title = "Avalynė moterims"
                        },
                        new
                        {
                            Id = 7,
                            ParentId = 2,
                            Title = "Apatinis trikotažas"
                        },
                        new
                        {
                            Id = 8,
                            ParentId = 3,
                            Title = "Vyriški drabužiai"
                        },
                        new
                        {
                            Id = 9,
                            ParentId = 3,
                            Title = "Avalynė vyrams"
                        },
                        new
                        {
                            Id = 10,
                            ParentId = 3,
                            Title = "Apatinis trikotažas vyrams"
                        },
                        new
                        {
                            Id = 11,
                            ParentId = 5,
                            Title = "Striukės moterims"
                        },
                        new
                        {
                            Id = 12,
                            ParentId = 5,
                            Title = "Suknelės"
                        },
                        new
                        {
                            Id = 13,
                            ParentId = 5,
                            Title = "Sportinė apranga moterims"
                        },
                        new
                        {
                            Id = 14,
                            ParentId = 5,
                            Title = "Megztiniai moterimis"
                        },
                        new
                        {
                            Id = 15,
                            ParentId = 5,
                            Title = "Kelnės moterims"
                        },
                        new
                        {
                            Id = 16,
                            ParentId = 5,
                            Title = "Džinsai moterims"
                        },
                        new
                        {
                            Id = 17,
                            ParentId = 6,
                            Title = "Šlepetės moterims"
                        },
                        new
                        {
                            Id = 18,
                            ParentId = 6,
                            Title = "Sportiniai bateliai"
                        },
                        new
                        {
                            Id = 19,
                            ParentId = 6,
                            Title = "Bateliai moterims"
                        },
                        new
                        {
                            Id = 20,
                            ParentId = 6,
                            Title = "Šlepetės moterims"
                        },
                        new
                        {
                            Id = 21,
                            ParentId = 8,
                            Title = "Vyriškos striukės"
                        },
                        new
                        {
                            Id = 22,
                            ParentId = 8,
                            Title = "Sportinė apranga vyrams"
                        },
                        new
                        {
                            Id = 23,
                            ParentId = 8,
                            Title = "Džemperiai vyrams"
                        },
                        new
                        {
                            Id = 24,
                            ParentId = 8,
                            Title = "Džinsai vyrams"
                        },
                        new
                        {
                            Id = 25,
                            ParentId = 8,
                            Title = "Vyriški marškinėliai"
                        },
                        new
                        {
                            Id = 26,
                            ParentId = 9,
                            Title = "Vyriški batai"
                        },
                        new
                        {
                            Id = 27,
                            ParentId = 9,
                            Title = "Kedai vyrams"
                        },
                        new
                        {
                            Id = 28,
                            ParentId = 9,
                            Title = "Šlepetės vyrams"
                        },
                        new
                        {
                            Id = 29,
                            ParentId = 4,
                            Title = "Drabužiai mergaitėms"
                        },
                        new
                        {
                            Id = 30,
                            ParentId = 4,
                            Title = "Drabužiai berniukams"
                        },
                        new
                        {
                            Id = 31,
                            ParentId = 29,
                            Title = "Megztiniai, blizonai, švarkai mergaitėms"
                        },
                        new
                        {
                            Id = 32,
                            ParentId = 29,
                            Title = "Marškinėliai mergaitėms"
                        },
                        new
                        {
                            Id = 33,
                            ParentId = 29,
                            Title = "Kelnės mergaitėms"
                        },
                        new
                        {
                            Id = 34,
                            ParentId = 29,
                            Title = "Suknelės mergaitėms"
                        },
                        new
                        {
                            Id = 35,
                            ParentId = 30,
                            Title = "Megztiniai, blizonai, švarkai berniukams"
                        },
                        new
                        {
                            Id = 36,
                            ParentId = 30,
                            Title = "Kelnės berniukams"
                        },
                        new
                        {
                            Id = 37,
                            ParentId = 30,
                            Title = "Marškinėliai berniukams"
                        },
                        new
                        {
                            Id = 38,
                            ParentId = 30,
                            Title = "Striukės berniukams"
                        },
                        new
                        {
                            Id = 39,
                            ParentId = 0,
                            Title = "Baldai ir namų interjeras"
                        },
                        new
                        {
                            Id = 40,
                            ParentId = 0,
                            Title = "Sportas, laisvalaikis, turizmas"
                        },
                        new
                        {
                            Id = 41,
                            ParentId = 0,
                            Title = "Kompiuterinė technika"
                        },
                        new
                        {
                            Id = 42,
                            ParentId = 39,
                            Title = "Svetainės baldai"
                        },
                        new
                        {
                            Id = 43,
                            ParentId = 39,
                            Title = "Lauko baldai"
                        },
                        new
                        {
                            Id = 44,
                            ParentId = 39,
                            Title = "Miegamojo baldai"
                        },
                        new
                        {
                            Id = 45,
                            ParentId = 39,
                            Title = "Biuro baldai"
                        },
                        new
                        {
                            Id = 46,
                            ParentId = 39,
                            Title = "Virtuvės baldai"
                        },
                        new
                        {
                            Id = 47,
                            ParentId = 39,
                            Title = "Vaiko kambario baldai"
                        },
                        new
                        {
                            Id = 48,
                            ParentId = 39,
                            Title = "Vonios kambario baldai"
                        },
                        new
                        {
                            Id = 49,
                            ParentId = 39,
                            Title = "Kilimai, kilimėliai"
                        },
                        new
                        {
                            Id = 50,
                            ParentId = 39,
                            Title = "Veidrodžiai"
                        },
                        new
                        {
                            Id = 51,
                            ParentId = 40,
                            Title = "Treniruokliai, treniruočių įranga"
                        },
                        new
                        {
                            Id = 52,
                            ParentId = 40,
                            Title = "Sporto prekės"
                        },
                        new
                        {
                            Id = 53,
                            ParentId = 40,
                            Title = "Laisvalaikis"
                        },
                        new
                        {
                            Id = 54,
                            ParentId = 40,
                            Title = "Dviračiai, paspirtukai, riedučiai, riedlentės"
                        },
                        new
                        {
                            Id = 55,
                            ParentId = 40,
                            Title = "Turizmas"
                        },
                        new
                        {
                            Id = 56,
                            ParentId = 40,
                            Title = "Žiemos sportas"
                        },
                        new
                        {
                            Id = 57,
                            ParentId = 40,
                            Title = "Maisto papildai, preparatai, funkcinis maistas"
                        },
                        new
                        {
                            Id = 58,
                            ParentId = 41,
                            Title = "Išoriniai kompiuterių aksesuarai"
                        },
                        new
                        {
                            Id = 59,
                            ParentId = 41,
                            Title = "Nešiojami kompiuteriai, priedai"
                        },
                        new
                        {
                            Id = 60,
                            ParentId = 41,
                            Title = "Planšetiniai kompiuteriai, el. skaityklės"
                        },
                        new
                        {
                            Id = 61,
                            ParentId = 41,
                            Title = "Žaidimų kompiuteriai, priedai"
                        },
                        new
                        {
                            Id = 62,
                            ParentId = 41,
                            Title = "Orgtechnika, priedai"
                        },
                        new
                        {
                            Id = 63,
                            ParentId = 41,
                            Title = "Monitoriai kompiuteriams ir laikikliai"
                        },
                        new
                        {
                            Id = 64,
                            ParentId = 41,
                            Title = "Duomenų laikmenos"
                        });
                });

            modelBuilder.Entity("EcommerceData.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EcommerceData.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceData.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("EcommerceData.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EcommerceData.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CostPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<double?>("HeightWithPackaging")
                        .HasColumnType("float");

                    b.Property<double?>("HeightWithoutPackaging")
                        .HasColumnType("float");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDiscount")
                        .HasColumnType("bit");

                    b.Property<double?>("LengthWithPackaging")
                        .HasColumnType("float");

                    b.Property<double?>("LengthWithoutPackaging")
                        .HasColumnType("float");

                    b.Property<string>("OtherBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackagingBoxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeightGross")
                        .HasColumnType("int");

                    b.Property<int?>("WeightNetto")
                        .HasColumnType("int");

                    b.Property<double?>("WidthWithPackaging")
                        .HasColumnType("float");

                    b.Property<double?>("WidthWithoutPackaging")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceData.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("EcommerceData.Models.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("EcommerceData.Models.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("EcommerceData.Models.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("EcommerceData.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EcommerceData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Lukas",
                            LastName = "Songulija",
                            Password = "$2a$11$bmaPv6exjUzfp0BBpFY3juagLGyUDoYsLThhSclSiztKWfm9VAaKO",
                            PhoneNumber = "860855183",
                            TypeId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("EcommerceData.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            Title = "USER"
                        });
                });

            modelBuilder.Entity("EcommerceData.Models.Cart", b =>
                {
                    b.HasOne("EcommerceData.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceData.Models.CartItem", b =>
                {
                    b.HasOne("EcommerceData.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceData.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceData.Models.Comment", b =>
                {
                    b.HasOne("EcommerceData.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceData.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceData.Models.Order", b =>
                {
                    b.HasOne("EcommerceData.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceData.Models.OrderItem", b =>
                {
                    b.HasOne("EcommerceData.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceData.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceData.Models.Payment", b =>
                {
                    b.HasOne("EcommerceData.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EcommerceData.Models.Product", b =>
                {
                    b.HasOne("EcommerceData.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("EcommerceData.Models.ProductCategory", b =>
                {
                    b.HasOne("EcommerceData.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceData.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceData.Models.ProductReview", b =>
                {
                    b.HasOne("EcommerceData.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceData.Models.ProductTag", b =>
                {
                    b.HasOne("EcommerceData.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceData.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EcommerceData.Models.Shipment", b =>
                {
                    b.HasOne("EcommerceData.Models.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EcommerceData.Models.User", b =>
                {
                    b.HasOne("EcommerceData.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("EcommerceData.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceData.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EcommerceData.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("EcommerceData.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("EcommerceData.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Comments");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("EcommerceData.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("EcommerceData.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceData.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
